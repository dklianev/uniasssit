#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AI —á–∞—Ç –∫–ª–∏–µ–Ω—Ç –∑–∞ Ollama –∏ OpenAI
–ë–∞–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç –∑–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç
"""

import requests
import json

class OllamaClient:
    def __init__(self, base_url="http://localhost:11434"):
        self.base_url = base_url
        self.current_model = None
        self.openai_api_key = None
        self.use_openai = False
        print("ü§ñ AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω")
    
    def set_openai_key_and_mode(self, api_key):
        """–ó–∞–¥–∞–≤–∞ OpenAI API –∫–ª—é—á –∏ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞ –≤ OpenAI —Ä–µ–∂–∏–º"""
        self.openai_api_key = api_key
        self.use_openai = True
        print("üîë OpenAI —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω")
    
    def set_mode(self, mode="ollama"):
        """–ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –º–µ–∂–¥—É 'ollama' –∏ 'openai'"""
        self.use_openai = (mode == "openai")
        return True
    
    def check_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ AI —É—Å–ª—É–≥–∞—Ç–∞ —Ä–∞–±–æ—Ç–∏"""
        if self.use_openai:
            return self._check_openai_connection()
        else:
            return self._check_ollama_connection()
    
    def _check_ollama_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ Ollama —Ä–∞–±–æ—Ç–∏"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=3)
            return response.status_code == 200
        except requests.exceptions.RequestException:
            return False
    
    def _check_openai_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ OpenAI API —Ä–∞–±–æ—Ç–∏"""
        if not self.openai_api_key:
            return False
        try:
            headers = {"Authorization": f"Bearer {self.openai_api_key}"}
            response = requests.get("https://api.openai.com/v1/models", 
                                  headers=headers, timeout=5)
            return response.status_code == 200
        except requests.exceptions.RequestException:
            return False
    
    def get_available_models(self):
        """–í—Ä—ä—â–∞ —Å–ø–∏—Å—ä–∫ —Å –Ω–∞–ª–∏—á–Ω–∏ –º–æ–¥–µ–ª–∏"""
        if self.use_openai:
            return ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo", "gpt-3.5-turbo"]
        else:
            return self._get_ollama_models()
    
    def _get_ollama_models(self):
        """–í—Ä—ä—â–∞ Ollama –º–æ–¥–µ–ª–∏"""
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=5)
            if response.status_code == 200:
                data = response.json()
                return [model["name"] for model in data.get("models", [])]
            return []
        except requests.exceptions.RequestException:
            return []
    
    def set_model(self, model_name):
        """–ó–∞–¥–∞–≤–∞ –º–æ–¥–µ–ª–∞ –∑–∞ –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ"""
        self.current_model = model_name
    
    def chat(self, message):
        """–ò–∑–ø—Ä–∞—â–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –∫—ä–º AI –º–æ–¥–µ–ª–∞"""
        if not self.current_model:
            return "‚ùå –ù—è–º–∞ –∏–∑–±—Ä–∞–Ω –º–æ–¥–µ–ª. –ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –º–æ–¥–µ–ª."
        
        if self.use_openai:
            return self._chat_openai(message)
        else:
            return self._chat_ollama(message)
    
    def _chat_ollama(self, message):
        """Ollama —á–∞—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç"""
        if not self._check_ollama_connection():
            return "‚ùå Ollama –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–µ–Ω. –ú–æ–ª—è —Å—Ç–∞—Ä—Ç–∏—Ä–∞–π—Ç–µ –ællama"
        
        try:
            request_data = {
                "model": self.current_model,
                "prompt": message,
                "stream": False
            }
            
            response = requests.post(
                f"{self.base_url}/api/generate",
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("response", "–ù—è–º–∞ –æ—Ç–≥–æ–≤–æ—Ä")
            else:
                return f"‚ùå Ollama –≥—Ä–µ—à–∫–∞ {response.status_code}"
                
        except requests.exceptions.Timeout:
            return "‚ùå –í—Ä–µ–º–µ—Ç–æ –∑–∞ –æ—Ç–≥–æ–≤–æ—Ä –∏–∑—Ç–µ—á–µ (30 —Å–µ–∫)"
        except requests.exceptions.RequestException as e:
            return f"‚ùå Ollama –º—Ä–µ–∂–æ–≤–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        except Exception as e:
            return f"‚ùå Ollama –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
    
    def _chat_openai(self, message):
        """OpenAI —á–∞—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç"""
        if not self.openai_api_key:
            return "‚ùå –ù—è–º–∞ –∑–∞–¥–∞–¥–µ–Ω OpenAI API –∫–ª—é—á"
        
        try:
            headers = {
                "Authorization": f"Bearer {self.openai_api_key}",
                "Content-Type": "application/json"
            }
            
            request_data = {
                "model": self.current_model,
                "messages": [{"role": "user", "content": message}],
                "max_tokens": 1000,
                "temperature": 0.7
            }
            
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=request_data,
                timeout=30
            )
            
            if response.status_code == 200:
                data = response.json()
                return data["choices"][0]["message"]["content"]
            else:
                return f"‚ùå OpenAI –≥—Ä–µ—à–∫–∞ {response.status_code}"
                
        except requests.exceptions.Timeout:
            return "‚ùå OpenAI: –í—Ä–µ–º–µ—Ç–æ –∑–∞ –æ—Ç–≥–æ–≤–æ—Ä –∏–∑—Ç–µ—á–µ (30 —Å–µ–∫)"
        except requests.exceptions.RequestException as e:
            return f"‚ùå OpenAI –º—Ä–µ–∂–æ–≤–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
        except Exception as e:
            return f"‚ùå OpenAI –Ω–µ–æ—á–∞–∫–≤–∞–Ω–∞ –≥—Ä–µ—à–∫–∞: {str(e)}"
    
    def get_status(self):
        """–í—Ä—ä—â–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≤—Ä—ä–∑–∫–∞—Ç–∞"""
        if not self.check_connection():
            provider = "OpenAI" if self.use_openai else "Ollama"
            return f"‚ùå {provider} –Ω–µ –µ –¥–æ—Å—Ç—ä–ø–µ–Ω"
        
        if not self.current_model:
            return "‚ö†Ô∏è –ù—è–º–∞ –∏–∑–±—Ä–∞–Ω –º–æ–¥–µ–ª"
        
        provider = "OpenAI" if self.use_openai else "Ollama"
        return f"‚úÖ –ì–æ—Ç–æ–≤ —Å –º–æ–¥–µ–ª: {self.current_model} ({provider})" 