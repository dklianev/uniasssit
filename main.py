#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéì –°—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ –ê—Å–∏—Å—Ç–µ–Ω—Ç
–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç 

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–Ω–æ—Å—Ç–∏:
- –ü–æ–∑–¥—Ä–∞–≤ —Å–ø–æ—Ä–µ–¥ —á–∞—Å–∞ –æ—Ç –¥–µ–Ω—è
- AI —á–∞—Ç —Å –ª–æ–∫–∞–ª–µ–Ω LLM –º–æ–¥–µ–ª (Ollama)
- –ë–µ–ª–µ–∂–∫–∏ (–¥–æ–±–∞–≤—è–Ω–µ, –ø—Ä–µ–≥–ª–µ–¥, –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ)
- Pomodoro —Ç–∞–π–º–µ—Ä
- SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω–∏

üìã –°–¢–†–£–ö–¢–£–†–ê –ù–ê –§–ê–ô–õ–ê:
1. –ò–º–ø–æ—Ä—Ç–∏
2. –û—Å–Ω–æ–≤–µ–Ω –∫–ª–∞—Å StudentAssistant
3. __init__ –∏ –±–∞–∑–æ–≤–∏ –º–µ—Ç–æ–¥–∏
4. HOME TAB + –º–µ—Ç–æ–¥–∏
5. AI CHAT TAB + –º–µ—Ç–æ–¥–∏  
6. NOTES TAB + –º–µ—Ç–æ–¥–∏
7. POMODORO TAB + –º–µ—Ç–æ–¥–∏
8. CALENDAR TAB + –º–µ—Ç–æ–¥–∏
9. GRADES TAB + –º–µ—Ç–æ–¥–∏
10. Dialog –∫–ª–∞—Å–æ–≤–µ
11. –ì–ª–∞–≤–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""

import wx
import wx.adv
import threading
from datetime import datetime
import random
import time

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–º–µ –Ω–∞—à–∏—Ç–µ –º–æ–¥—É–ª–∏
from database import Database
from ollama import OllamaClient
from pomodoro import PomodoroTimer
from events import Calendar
from grades import GradeTracker

class StudentAssistant(wx.Frame):
    # ============================================================================
    # üèóÔ∏è –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ë–ê–ó–û–í–ò –ú–ï–¢–û–î–ò
    # ============================================================================
    
    def __init__(self):
        super().__init__(None, title="üéì –°—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ –ê—Å–∏—Å—Ç–µ–Ω—Ç", size=(800, 600))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏—Ç–µ
        self.db = Database()
        self.ai = OllamaClient()
        self.pomodoro = PomodoroTimer()
        self.calendar = Calendar()
        self.grades = GradeTracker()
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_ui()
        self.Center()
        
        # –ü–æ–∫–∞–∑–≤–∞–º–µ –ø–æ–∑–¥—Ä–∞–≤
        self.show_greeting()
        
        print("üéì –°—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ –∞—Å–∏—Å—Ç–µ–Ω—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    
    def create_ui(self):
        """–°—ä–∑–¥–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—Å–∫–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ì–ª–∞–≤–µ–Ω –ø–∞–Ω–µ–ª
        panel = wx.Panel(self)
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ó–∞–≥–ª–∞–≤–∏–µ
        title = wx.StaticText(panel, label="üéì –°—Ç—É–¥–µ–Ω—Ç—Å–∫–∏ –ê—Å–∏—Å—Ç–µ–Ω—Ç")
        title_font = wx.Font(18, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
        title.SetFont(title_font)
        title.SetForegroundColour(wx.Colour(50, 100, 200))
        
        # –ü–æ–∑–¥—Ä–∞–≤ –∏ –≤—Ä–µ–º–µ
        self.greeting_label = wx.StaticText(panel, label=self.get_greeting())
        greeting_font = wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
        self.greeting_label.SetFont(greeting_font)
        
        # Notebook –∑–∞ —Ç–∞–± —Å—Ç—Ä–∞–Ω–∏—Ü–∏
        self.notebook = wx.Notebook(panel)
        
        # –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–∞–±–æ–≤–µ—Ç–µ
        self.create_home_tab()
        self.create_chat_tab()
        self.create_notes_tab()
        self.create_pomodoro_tab()
        self.create_calendar_tab()
        self.create_grades_tab()
        
        # Layout
        main_sizer.Add(title, 0, wx.ALL | wx.CENTER, 10)
        main_sizer.Add(self.greeting_label, 0, wx.ALL | wx.CENTER, 5)
        main_sizer.Add(wx.StaticLine(panel), 0, wx.EXPAND | wx.ALL, 5)
        main_sizer.Add(self.notebook, 1, wx.EXPAND | wx.ALL, 10)
        
        panel.SetSizer(main_sizer)
    
    def get_greeting(self):
        """–í—Ä—ä—â–∞ –ø–æ–∑–¥—Ä–∞–≤ —Å–ø–æ—Ä–µ–¥ —á–∞—Å–∞ –æ—Ç –¥–µ–Ω—è"""
        hour = datetime.now().hour
        current_time = datetime.now().strftime("%H:%M - %d.%m.%Y")
        
        if hour < 12:
            greeting = "‚òÄÔ∏è –î–æ–±—Ä–æ —É—Ç—Ä–æ!"
        elif hour < 18:
            greeting = "üå§Ô∏è –î–æ–±—ä—Ä –¥–µ–Ω!"
        else:
            greeting = "üåô –î–æ–±—ä—Ä –≤–µ—á–µ—Ä!"
        
        return f"{greeting} | {current_time}"
    
    def show_greeting(self):
        """–ü–æ–∫–∞–∑–≤–∞ –ø–æ–∑–¥—Ä–∞–≤ –≤ –∫–æ–Ω–∑–æ–ª–∞—Ç–∞"""
        hour = datetime.now().hour
        if hour < 12:
            print("‚òÄÔ∏è –î–æ–±—Ä–æ —É—Ç—Ä–æ! –ì–æ—Ç–æ–≤ —Å—ä–º –¥–∞ —Ç–∏ –ø–æ–º–æ–≥–Ω–∞ –¥–Ω–µ—Å!")
        elif hour < 18:
            print("üå§Ô∏è –î–æ–±—ä—Ä –¥–µ–Ω! –ö–∞–∫ –º–∏–Ω–∞–≤–∞ –¥–µ–Ω—è—Ç —Ç–∏?")
        else:
            print("üåô –î–æ–±—ä—Ä –≤–µ—á–µ—Ä! –í—Ä–µ–º–µ –µ –∑–∞ —É—á–µ–Ω–µ!")

    # ============================================================================
    # üè† HOME TAB - –ù–∞—á–∞–ª–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    # ============================================================================
    
    def create_home_tab(self):
        """–°—ä–∑–¥–∞–≤–∞ –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        home_panel = wx.Panel(self.notebook)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –î–Ω–µ–≤–µ–Ω —Ü–∏—Ç–∞—Ç
        quotes = [
            "üí™ –£—Å–ø–µ—Ö—ä—Ç –µ —Å–±–æ—Ä –æ—Ç –º–∞–ª–∫–∏ —É—Å–∏–ª–∏—è, –ø–æ–≤—Ç–∞—Ä—è–Ω–∏ –¥–µ–Ω —Å–ª–µ–¥ –¥–µ–Ω.",
            "üéØ –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–∏—è—Ç –Ω–∞—á–∏–Ω –¥–∞ —Å–≤—ä—Ä—à–∏—à —Ä–∞–±–æ—Ç–∞ –µ –¥–∞ –∑–∞–ø–æ—á–Ω–µ—à.",
            "üìö –ó–Ω–∞–Ω–∏–µ—Ç–æ –µ —Å–∏–ª–∞, –Ω–æ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ—Ç–æ –º—É –µ –º—ä–¥—Ä–æ—Å—Ç.",
            "üåü –ë—ä–¥–∏ –ø—Ä–æ–º—è–Ω–∞—Ç–∞, –∫–æ—è—Ç–æ –∏—Å–∫–∞—à –¥–∞ –≤–∏–¥–∏—à –≤ —Å–≤–µ—Ç–∞.",
            "üöÄ –ù–µ —á–∞–∫–∞–π –≤—ä–∑–º–æ–∂–Ω–æ—Å—Ç—Ç–∞ - —Å—ä–∑–¥–∞–π —è!"
        ]
        
        daily_quote = random.choice(quotes)
        quote_label = wx.StaticText(home_panel, label=f"–¶–∏—Ç–∞—Ç –Ω–∞ –¥–µ–Ω—è:\n{daily_quote}")
        quote_label.SetForegroundColour(wx.Colour(100, 100, 200))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        notes_count = self.db.get_notes_count()
        pomodoro_stats = self.pomodoro.get_statistics()
        events_count = self.calendar.get_events_count()
        grade_stats = self.grades.get_statistics()
        
        stats_text = f"""
üìä –¢–≤–æ–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
‚Ä¢ üìù –ë–µ–ª–µ–∂–∫–∏: {notes_count}
‚Ä¢ üçÖ Pomodoro —Å–µ—Å–∏–∏: {pomodoro_stats['sessions_completed']} 
‚Ä¢ ‚è∞ –†–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ: {pomodoro_stats['total_work_minutes']} –º–∏–Ω
‚Ä¢ üìÖ –°—ä–±–∏—Ç–∏—è: {events_count}
‚Ä¢ üìö –ü—Ä–µ–¥–º–µ—Ç–∏: {grade_stats['total_subjects']}
‚Ä¢ üéØ –°—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞: {grade_stats['average_grade']:.2f}
        """
        
        stats_label = wx.StaticText(home_panel, label=stats_text)
        
        # –ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è
        actions_box = wx.StaticBox(home_panel, label="–ë—ä—Ä–∑–∏ –¥–µ–π—Å—Ç–≤–∏—è")
        actions_sizer = wx.StaticBoxSizer(actions_box, wx.HORIZONTAL)
        
        new_note_btn = wx.Button(home_panel, label="üìù –ù–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞")
        start_work_btn = wx.Button(home_panel, label="üçÖ –ü–æ–º–æ–¥–æ—Ä–æ")
        
        new_note_btn.Bind(wx.EVT_BUTTON, lambda e: self.notebook.SetSelection(2))
        start_work_btn.Bind(wx.EVT_BUTTON, lambda e: self.notebook.SetSelection(3))
        
        actions_sizer.Add(new_note_btn, 0, wx.ALL, 5)
        actions_sizer.Add(start_work_btn, 0, wx.ALL, 5)
        
        # Layout
        sizer.Add(quote_label, 0, wx.ALL | wx.CENTER, 20)
        sizer.Add(wx.StaticLine(home_panel), 0, wx.EXPAND | wx.ALL, 10)
        sizer.Add(stats_label, 0, wx.ALL, 20)
        sizer.Add(actions_sizer, 0, wx.ALL | wx.CENTER, 20)
        
        home_panel.SetSizer(sizer)
        self.notebook.AddPage(home_panel, "üè† –ù–∞—á–∞–ª–æ")
    
    # ============================================================================
    # üí¨ AI CHAT TAB - –ß–∞—Ç —Å –∏–∑–∫—É—Å—Ç–≤–µ–Ω –∏–Ω—Ç–µ–ª–µ–∫—Ç  
    # ============================================================================
    
    def create_chat_tab(self):
        """–°—ä–∑–¥–∞–≤–∞ —á–∞—Ç —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞"""
        chat_panel = wx.Panel(self.notebook)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # AI –î–æ—Å—Ç–∞–≤—á–∏–∫
        provider_sizer = wx.BoxSizer(wx.HORIZONTAL)
        provider_label = wx.StaticText(chat_panel, label="AI –ú–æ–¥–µ–ª:")
        self.provider_choice = wx.Choice(chat_panel, choices=["Ollama", "OpenAI"])
        self.provider_choice.SetSelection(0)  # –ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ Ollama
        self.provider_choice.Bind(wx.EVT_CHOICE, self.on_provider_change)
        
        provider_sizer.Add(provider_label, 0, wx.ALL | wx.CENTER, 5)
        provider_sizer.Add(self.provider_choice, 0, wx.ALL, 5)
        
        # OpenAI API Key –∫–æ–Ω—Ç—Ä–æ–ª–∏
        self.api_key_label = wx.StaticText(chat_panel, label="OpenAI API –∫–ª—é—á:")
        self.api_key_text = wx.TextCtrl(chat_panel, style=wx.TE_PASSWORD)
        self.set_key_btn = wx.Button(chat_panel, label="üîë –ó–∞–¥–∞–π")
        self.set_key_btn.Bind(wx.EVT_BUTTON, self.set_openai_key)
        
        # –ì—Ä—É–ø–∏—Ä–∞–º–µ –≤ sizer
        self.api_key_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.api_key_sizer.Add(self.api_key_label, 0, wx.ALL | wx.CENTER, 5)
        self.api_key_sizer.Add(self.api_key_text, 1, wx.ALL | wx.EXPAND, 5)
        self.api_key_sizer.Add(self.set_key_btn, 0, wx.ALL, 5)
        
        # –°–∫—Ä–∏–≤–∞–º–µ OpenAI –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ç–µ –ø—ä—Ä–≤–æ–Ω–∞—á–∞–ª–Ω–æ
        self.api_key_label.Hide()
        self.api_key_text.Hide()
        self.set_key_btn.Hide()
        
        # –ú–æ–¥–µ–ª–∏
        model_sizer = wx.BoxSizer(wx.HORIZONTAL)
        model_label = wx.StaticText(chat_panel, label="AI –ú–æ–¥–µ–ª:")
        self.model_choice = wx.Choice(chat_panel)
        refresh_btn = wx.Button(chat_panel, label="üîÑ –û–±–Ω–æ–≤–∏")
        refresh_btn.Bind(wx.EVT_BUTTON, self.refresh_models)
        
        model_sizer.Add(model_label, 0, wx.ALL | wx.CENTER, 5)
        model_sizer.Add(self.model_choice, 1, wx.ALL | wx.EXPAND, 5)
        model_sizer.Add(refresh_btn, 0, wx.ALL, 5)
        
        # –ß–∞—Ç
        self.chat_display = wx.TextCtrl(chat_panel, style=wx.TE_MULTILINE | wx.TE_READONLY)
        chat_font = wx.Font(10, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL)
        self.chat_display.SetFont(chat_font)
        
        # –í—Ö–æ–¥ –∑–∞ —Å—ä–æ–±—â–µ–Ω–∏—è
        input_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.chat_input = wx.TextCtrl(chat_panel, style=wx.TE_PROCESS_ENTER)
        self.chat_input.Bind(wx.EVT_TEXT_ENTER, self.send_message)
        send_btn = wx.Button(chat_panel, label="üì§ –ò–∑–ø—Ä–∞—Ç–∏")
        send_btn.Bind(wx.EVT_BUTTON, self.send_message)
        
        input_sizer.Add(self.chat_input, 1, wx.ALL | wx.EXPAND, 5)
        input_sizer.Add(send_btn, 0, wx.ALL, 5)
        
        # –°—Ç–∞—Ç—É—Å
        self.chat_status = wx.StaticText(chat_panel, label="–ì–æ—Ç–æ–≤ –∑–∞ —á–∞—Ç")
        
        # Layout
        sizer.Add(provider_sizer, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(self.api_key_sizer, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(model_sizer, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(self.chat_display, 1, wx.EXPAND | wx.ALL, 5)
        sizer.Add(input_sizer, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(self.chat_status, 0, wx.ALL, 5)
        
        chat_panel.SetSizer(sizer)
        self.notebook.AddPage(chat_panel, "üí¨ AI –ß–∞—Ç")
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –º–æ–¥–µ–ª–∏—Ç–µ
        self.refresh_models()

    # AI CHAT –ú–ï–¢–û–î–ò
    # --------------------------------------------------------------------------------

    def refresh_models(self, event=None):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å–ø–∏—Å—ä–∫–∞ —Å AI –º–æ–¥–µ–ª–∏"""
        models = self.ai.get_available_models()
        
        self.model_choice.Clear()
        if models:
            for model in models:
                self.model_choice.Append(model)
            self.model_choice.SetSelection(0)
            self.ai.set_model(models[0])
            provider = self.provider_choice.GetStringSelection()
            self.chat_status.SetLabel(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏ {len(models)} {provider} –º–æ–¥–µ–ª–∞")
        else:
            self.model_choice.Append("–ù—è–º–∞ –º–æ–¥–µ–ª–∏")
            self.chat_status.SetLabel("‚ùå –ù—è–º–∞ –¥–æ—Å—Ç—ä–ø–Ω–∏ –º–æ–¥–µ–ª–∏")

    def send_message(self, event):
        """–ò–∑–ø—Ä–∞—â–∞ —Å—ä–æ–±—â–µ–Ω–∏–µ –∫—ä–º AI"""
        message = self.chat_input.GetValue().strip()
        if not message:
            return
        
        # –ó–∞–¥–∞–≤–∞–º–µ –º–æ–¥–µ–ª–∞
        if self.model_choice.GetSelection() >= 0:
            model_name = self.model_choice.GetStringSelection()
            if model_name != "–ù—è–º–∞ –º–æ–¥–µ–ª–∏":
                self.ai.set_model(model_name)
        
        # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ—Ç–æ
        self.chat_display.AppendText(f"üßë –¢–∏: {message}\n\n")
        self.chat_input.SetValue("")
        self.chat_status.SetLabel("ü§ñ AI –º–∏—Å–ª–∏...")
        
        # –ò–∑–ø—Ä–∞—â–∞–º–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω thread
        def send_thread():
            response = self.ai.chat(message)
            wx.CallAfter(self.on_ai_response, response)
        
        thread = threading.Thread(target=send_thread)
        thread.daemon = True
        thread.start()

    def on_ai_response(self, response):
        """–û–±—Ä–∞–±–æ—Ç–≤–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞ –æ—Ç AI"""
        self.chat_display.AppendText(f"ü§ñ AI: {response}\n\n")
        self.chat_status.SetLabel("‚úÖ –ì–æ—Ç–æ–≤ –∑–∞ –Ω–æ–≤–∏ –≤—ä–ø—Ä–æ—Å–∏")

    def on_provider_change(self, event):
        """–ü—Ä–æ–º–µ–Ω—è AI –¥–æ—Å—Ç–∞–≤—á–∏–∫–∞"""
        provider = self.provider_choice.GetStringSelection()
        
        if provider == "OpenAI":
            self.ai.set_mode("openai")
            self._show_openai_controls(True)
            if self.api_key_text.GetValue().strip():
                self.ai.set_openai_key_and_mode(self.api_key_text.GetValue().strip())
        else:
            self.ai.set_mode("ollama")
            self._show_openai_controls(False)
        
        self.refresh_models()

    def _show_openai_controls(self, show):
        """–ü–æ–∫–∞–∑–≤–∞/—Å–∫—Ä–∏–≤–∞ OpenAI –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ç–µ"""
        self.api_key_label.Show(show)
        self.api_key_text.Show(show)
        self.set_key_btn.Show(show)
        self.api_key_label.GetParent().Layout()

    def set_openai_key(self, event):
        """–ó–∞–¥–∞–≤–∞ OpenAI API –∫–ª—é—á–∞"""
        api_key = self.api_key_text.GetValue().strip()
        if not api_key:
            wx.MessageBox("–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ API –∫–ª—é—á", "–ì—Ä–µ—à–∫–∞")
            return
        
        self.ai.set_openai_key_and_mode(api_key)
        self.chat_status.SetLabel("üîë OpenAI API –∫–ª—é—á –∑–∞–¥–∞–¥–µ–Ω")
        self.refresh_models()

    # ============================================================================
    # üìù NOTES TAB - –ë–µ–ª–µ–∂–∫–∏
    # ============================================================================

    def create_notes_tab(self):
        """–°—ä–∑–¥–∞–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ —Å –±–µ–ª–µ–∂–∫–∏"""
        notes_panel = wx.Panel(self.notebook)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        add_btn = wx.Button(notes_panel, label="‚ûï –î–æ–±–∞–≤–∏ –±–µ–ª–µ–∂–∫–∞")
        refresh_btn = wx.Button(notes_panel, label="üîÑ –û–±–Ω–æ–≤–∏")
        delete_btn = wx.Button(notes_panel, label="üóëÔ∏è –ò–∑—Ç—Ä–∏–π")
        
        add_btn.Bind(wx.EVT_BUTTON, self.add_note)
        refresh_btn.Bind(wx.EVT_BUTTON, self.refresh_notes)
        delete_btn.Bind(wx.EVT_BUTTON, self.delete_note)
        
        btn_sizer.Add(add_btn, 0, wx.ALL, 5)
        btn_sizer.Add(refresh_btn, 0, wx.ALL, 5)
        btn_sizer.Add(delete_btn, 0, wx.ALL, 5)
        
        # –°–ø–∏—Å—ä–∫ —Å –±–µ–ª–µ–∂–∫–∏
        self.notes_list = wx.ListCtrl(notes_panel, style=wx.LC_REPORT | wx.LC_SINGLE_SEL)
        self.notes_list.AppendColumn("ID", width=50)
        self.notes_list.AppendColumn("–ó–∞–≥–ª–∞–≤–∏–µ", width=200)
        self.notes_list.AppendColumn("–°—ä–∑–¥–∞–¥–µ–Ω–∞", width=150)
        
        # –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ –±–µ–ª–µ–∂–∫–∞
        self.note_view = wx.TextCtrl(notes_panel, style=wx.TE_MULTILINE | wx.TE_READONLY)
        
        self.notes_list.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_note_selected)
        
        # Layout
        sizer.Add(btn_sizer, 0, wx.ALL, 5)
        sizer.Add(self.notes_list, 1, wx.EXPAND | wx.ALL, 5)
        sizer.Add(wx.StaticText(notes_panel, label="–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ:"), 0, wx.ALL, 5)
        sizer.Add(self.note_view, 1, wx.EXPAND | wx.ALL, 5)
        
        notes_panel.SetSizer(sizer)
        self.notebook.AddPage(notes_panel, "üìù –ë–µ–ª–µ–∂–∫–∏")
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –±–µ–ª–µ–∂–∫–∏—Ç–µ
        self.refresh_notes()

    # NOTES –ú–ï–¢–û–î–ò
    # --------------------------------------------------------------------------------

    def refresh_notes(self, event=None):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å–ø–∏—Å—ä–∫–∞ —Å –±–µ–ª–µ–∂–∫–∏"""
        self.notes_list.DeleteAllItems()
        notes = self.db.get_all_notes()
        
        for note in notes:
            index = self.notes_list.InsertItem(self.notes_list.GetItemCount(), str(note[0]))
            self.notes_list.SetItem(index, 1, note[1])
            self.notes_list.SetItem(index, 2, note[3])

    def add_note(self, event):
        """–î–æ–±–∞–≤—è –Ω–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞"""
        dialog = NoteDialog(self, "–ù–æ–≤–∞ –±–µ–ª–µ–∂–∫–∞")
        if dialog.ShowModal() == wx.ID_OK:
            title, content = dialog.get_data()
            if title and content:
                self.db.add_note(title, content)
                self.refresh_notes()
        dialog.Destroy()

    def delete_note(self, event):
        """–ò–∑—Ç—Ä–∏–≤–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –±–µ–ª–µ–∂–∫–∞"""
        selected = self.notes_list.GetFirstSelected()
        if selected == -1:
            wx.MessageBox("–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –±–µ–ª–µ–∂–∫–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            return
        
        note_id = int(self.notes_list.GetItemText(selected, 0))
        
        if wx.MessageBox("–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ?", "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ", wx.YES_NO) == wx.YES:
            self.db.delete_note(note_id)
            self.refresh_notes()
            self.note_view.SetValue("")

    def on_note_selected(self, event):
        """–ü–æ–∫–∞–∑–≤–∞ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ –Ω–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –±–µ–ª–µ–∂–∫–∞"""
        selected = event.GetIndex()
        note_id = int(self.notes_list.GetItemText(selected, 0))
        
        note = self.db.get_note_by_id(note_id)
        if note:
            content = f"–ó–∞–≥–ª–∞–≤–∏–µ: {note[1]}\n–°—ä–∑–¥–∞–¥–µ–Ω–∞: {note[3]}\n\n{note[2]}"
            self.note_view.SetValue(content)

    # ============================================================================
    # üçÖ POMODORO TAB - Pomodoro —Ç–µ—Ö–Ω–∏–∫–∞
    # ============================================================================

    def create_pomodoro_tab(self):
        """–°—ä–∑–¥–∞–≤–∞ Pomodoro —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞"""
        pomodoro_panel = wx.Panel(self.notebook)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –°—Ç–∞—Ç—É—Å
        self.pomodoro_status = wx.StaticText(pomodoro_panel, label="–ì–æ—Ç–æ–≤ –∑–∞ –∑–∞–ø–æ—á–≤–∞–Ω–µ")
        status_font = wx.Font(16, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
        self.pomodoro_status.SetFont(status_font)
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        
        self.work_btn = wx.Button(pomodoro_panel, label="üéØ –†–∞–±–æ—Ç–∞ (25 –º–∏–Ω)")
        self.break_btn = wx.Button(pomodoro_panel, label="‚òï –ü–æ—á–∏–≤–∫–∞ (5 –º–∏–Ω)")
        self.pause_btn = wx.Button(pomodoro_panel, label="‚è∏Ô∏è –ü–∞—É–∑–∞")
        self.stop_btn = wx.Button(pomodoro_panel, label="‚èπÔ∏è –°—Ç–æ–ø")
        
        self.work_btn.Bind(wx.EVT_BUTTON, self.start_work)
        self.break_btn.Bind(wx.EVT_BUTTON, self.start_break)
        self.pause_btn.Bind(wx.EVT_BUTTON, self.pause_pomodoro)
        self.stop_btn.Bind(wx.EVT_BUTTON, self.stop_pomodoro)
        
        btn_sizer.Add(self.work_btn, 0, wx.ALL, 5)
        btn_sizer.Add(self.break_btn, 0, wx.ALL, 5)
        btn_sizer.Add(self.pause_btn, 0, wx.ALL, 5)
        btn_sizer.Add(self.stop_btn, 0, wx.ALL, 5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = self.pomodoro.get_statistics()
        stats_text = f"""
üçÖ Pomodoro —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –ó–∞–≤—ä—Ä—à–µ–Ω–∏ —Å–µ—Å–∏–∏: {stats['sessions_completed']}
‚Ä¢ –û–±—â–æ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ: {stats['total_work_minutes']} –º–∏–Ω—É—Ç–∏
‚Ä¢ –†–∞–±–æ—Ç–Ω–∞ —Å–µ—Å–∏—è: {stats['work_session_length']} –º–∏–Ω—É—Ç–∏
‚Ä¢ –ü–æ—á–∏–≤–∫–∞: {stats['break_length']} –º–∏–Ω—É—Ç–∏
        """
        
        self.pomodoro_stats = wx.StaticText(pomodoro_panel, label=stats_text)
        
        # Layout
        sizer.Add(self.pomodoro_status, 0, wx.ALL | wx.CENTER, 20)
        sizer.Add(btn_sizer, 0, wx.ALL | wx.CENTER, 10)
        sizer.Add(wx.StaticLine(pomodoro_panel), 0, wx.EXPAND | wx.ALL, 10)
        sizer.Add(self.pomodoro_stats, 0, wx.ALL, 20)
        
        pomodoro_panel.SetSizer(sizer)
        self.notebook.AddPage(pomodoro_panel, "üçÖ Pomodoro")
        
        # –°—Ç–∞—Ä—Ç–∏—Ä–∞–º–µ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ —Å—Ç–∞—Ç—É—Å–∞
        self.start_pomodoro_updates()

    # POMODORO –ú–ï–¢–û–î–ò
    # --------------------------------------------------------------------------------

    def start_work(self, event):
        """–ó–∞–ø–æ—á–≤–∞ —Ä–∞–±–æ—Ç–Ω–∞ —Å–µ—Å–∏—è"""
        if self.pomodoro.start_work_session():
            self.work_btn.Enable(False)
            self.break_btn.Enable(False)
            self.pause_btn.Enable(True)
            self.stop_btn.Enable(True)

    def start_break(self, event):
        """–ó–∞–ø–æ—á–≤–∞ –ø–æ—á–∏–≤–∫–∞"""
        if self.pomodoro.start_break_session():
            self.work_btn.Enable(False)
            self.break_btn.Enable(False)
            self.pause_btn.Enable(True)
            self.stop_btn.Enable(True)

    def pause_pomodoro(self, event):
        """–ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –ø–∞—É–∑–∞/–ø—Ä–æ–¥—ä–ª–∂–∏"""
        self.pomodoro.pause_timer()
        # –¢–µ–∫—Å—Ç—ä—Ç –Ω–∞ –±—É—Ç–æ–Ω–∞ —Å–µ –æ–±–Ω–æ–≤—è–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç update_pomodoro_display

    def stop_pomodoro(self, event):
        """–°–ø–∏—Ä–∞ —Ç–∞–π–º–µ—Ä–∞"""
        self.pomodoro.stop_timer()
        self.work_btn.Enable(True)
        self.break_btn.Enable(True)
        self.pause_btn.Enable(False)
        self.stop_btn.Enable(False)
        self.pomodoro_status.SetLabel("–°–ø—Ä—è–Ω")
        print("\a")  # –ó–≤—É–∫–æ–≤ —Å–∏–≥–Ω–∞–ª –ø—Ä–∏ —Å–ø–∏—Ä–∞–Ω–µ

    def start_pomodoro_updates(self):
        """–°—Ç–∞—Ä—Ç–∏—Ä–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ—Ç–æ –Ω–∞ Pomodoro —Å—Ç–∞—Ç—É—Å–∞"""
        def update_status():
            while True:
                status = self.pomodoro.get_status()
                wx.CallAfter(self.update_pomodoro_display, status)
                time.sleep(1)
        
        thread = threading.Thread(target=update_status)
        thread.daemon = True
        thread.start()

    def update_pomodoro_display(self, status):
        """–û–±–Ω–æ–≤—è–≤–∞ –¥–∏—Å–ø–ª–µ—è –Ω–∞ Pomodoro"""
        if hasattr(self, 'pomodoro_status'):
            self.pomodoro_status.SetLabel(status['message'])
            
            # –û–±–Ω–æ–≤—è–≤–∞–º–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ pause –±—É—Ç–æ–Ω–∞
            if hasattr(self, 'pause_btn') and status['status'] == 'running':
                if status.get('is_paused', False):
                    self.pause_btn.SetLabel("‚ñ∂Ô∏è –ü—Ä–æ–¥—ä–ª–∂–∏")
                else:
                    self.pause_btn.SetLabel("‚è∏Ô∏è –ü–∞—É–∑–∞")
            
            # –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏—Ç–µ
            if status['status'] == 'stopped':
                stats = self.pomodoro.get_statistics()
                stats_text = f"""
üçÖ Pomodoro —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –ó–∞–≤—ä—Ä—à–µ–Ω–∏ —Å–µ—Å–∏–∏: {stats['sessions_completed']}
‚Ä¢ –û–±—â–æ —Ä–∞–±–æ—Ç–Ω–æ –≤—Ä–µ–º–µ: {stats['total_work_minutes']} –º–∏–Ω—É—Ç–∏
‚Ä¢ –†–∞–±–æ—Ç–Ω–∞ —Å–µ—Å–∏—è: {stats['work_session_length']} –º–∏–Ω—É—Ç–∏
‚Ä¢ –ü–æ—á–∏–≤–∫–∞: {stats['break_length']} –º–∏–Ω—É—Ç–∏
                """
                self.pomodoro_stats.SetLabel(stats_text)
                
                # –í—ä–∑—Å—Ç–∞–Ω–æ–≤—è–≤–∞–º–µ –±—É—Ç–æ–Ω–∏—Ç–µ
                self.work_btn.Enable(True)
                self.break_btn.Enable(True)
                self.pause_btn.Enable(False)
                self.stop_btn.Enable(False)

    # ============================================================================
    # üìÖ CALENDAR TAB - –ö–∞–ª–µ–Ω–¥–∞—Ä —Å—ä—Å —Å—ä–±–∏—Ç–∏—è
    # ============================================================================

    def create_calendar_tab(self):
        """–°—ä–∑–¥–∞–≤–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∞–ª–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä"""
        calendar_panel = wx.Panel(self.notebook)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        add_event_btn = wx.Button(calendar_panel, label="‚ûï –ù–æ–≤–æ —Å—ä–±–∏—Ç–∏–µ")
        delete_btn = wx.Button(calendar_panel, label="üóëÔ∏è –ò–∑—Ç—Ä–∏–π —Å—ä–±–∏—Ç–∏–µ")
        today_btn = wx.Button(calendar_panel, label="üè† –î–Ω–µ—Å")
        
        add_event_btn.Bind(wx.EVT_BUTTON, self.add_event)
        delete_btn.Bind(wx.EVT_BUTTON, self.delete_event)
        today_btn.Bind(wx.EVT_BUTTON, self.go_to_today)
        
        btn_sizer.Add(add_event_btn, 0, wx.ALL, 5)
        btn_sizer.Add(delete_btn, 0, wx.ALL, 5)
        btn_sizer.Add(today_btn, 0, wx.ALL, 5)
        
        # –†–µ–∞–ª–µ–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª
        self.calendar_ctrl = wx.adv.CalendarCtrl(calendar_panel, 
                                                style=wx.adv.CAL_SHOW_HOLIDAYS | 
                                                      wx.adv.CAL_MONDAY_FIRST)
        self.calendar_ctrl.Bind(wx.adv.EVT_CALENDAR_SEL_CHANGED, self.on_date_selected)
        
        # –°—ä–±–∏—Ç–∏—è –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        events_box = wx.StaticBox(calendar_panel, label="–°—ä–±–∏—Ç–∏—è –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞")
        events_sizer = wx.StaticBoxSizer(events_box, wx.VERTICAL)
        
        self.selected_date_events = wx.ListCtrl(calendar_panel, 
                                              style=wx.LC_REPORT | wx.LC_SINGLE_SEL,
                                              size=(-1, 150))
        self.selected_date_events.AppendColumn("ID", width=50)
        self.selected_date_events.AppendColumn("–°—ä–±–∏—Ç–∏–µ", width=200)
        self.selected_date_events.AppendColumn("–ß–∞—Å", width=80)
        self.selected_date_events.AppendColumn("–¢–∏–ø", width=100)
        
        events_sizer.Add(self.selected_date_events, 1, wx.EXPAND | wx.ALL, 5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        self.date_info = wx.StaticText(calendar_panel, label="–ò–∑–±–µ—Ä–µ—Ç–µ –¥–∞—Ç–∞ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞")
        date_font = wx.Font(12, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
        self.date_info.SetFont(date_font)
        self.date_info.SetForegroundColour(wx.Colour(50, 100, 200))
        
        # Layout
        sizer.Add(btn_sizer, 0, wx.ALL, 5)
        sizer.Add(self.date_info, 0, wx.ALL | wx.CENTER, 10)
        sizer.Add(self.calendar_ctrl, 0, wx.ALL | wx.CENTER, 10)
        sizer.Add(events_sizer, 1, wx.EXPAND | wx.ALL, 5)
        
        calendar_panel.SetSizer(sizer)
        self.notebook.AddPage(calendar_panel, "üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–º–µ —Å –¥–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        self.refresh_calendar_display()

    # CALENDAR –ú–ï–¢–û–î–ò
    # --------------------------------------------------------------------------------

    def refresh_calendar_display(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—è –¥–∏—Å–ø–ª–µ–π"""
        # –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å–æ–±—ã—Ç–∏—è—Ç–∞ –∑–∞ —Ç–µ–∫—É—â–æ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –¥–∞—Ç–∞
        selected_date = self.calendar_ctrl.GetDate()
        date_str = selected_date.Format("%d-%m-%Y")
        self.update_date_events(date_str)

    def on_date_selected(self, event):
        """–û–±—Ä–∞–±–æ—Ç–≤–∞ –∏–∑–±–∏—Ä–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞"""
        selected_date = self.calendar_ctrl.GetDate()
        date_str = selected_date.Format("%d-%m-%Y")
        
        # –û–±–Ω–æ–≤—è–≤–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è—Ç–∞ –∑–∞ –¥–∞—Ç–∞—Ç–∞
        formatted_date = selected_date.Format("%d.%m.%Y")
        weekday = selected_date.GetWeekDayName(selected_date.GetWeekDay())
        self.date_info.SetLabel(f"üìÖ {weekday}, {formatted_date}")
        
        # –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—ä–±–∏—Ç–∏—è—Ç–∞ –∑–∞ —Ç–∞–∑–∏ –¥–∞—Ç–∞
        self.update_date_events(date_str)

    def update_date_events(self, date_str):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å–ø–∏—Å—ä–∫–∞ —Å—ä—Å —Å—ä–±–∏—Ç–∏—è –∑–∞ –¥–∞–¥–µ–Ω–∞ –¥–∞—Ç–∞"""
        self.selected_date_events.DeleteAllItems()
        
        # –í–∑–µ–º–∞–º–µ –≤—Å–∏—á–∫–∏ —Å—ä–±–∏—Ç–∏—è –∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–º–µ –ø–æ –¥–∞—Ç–∞
        all_events = self.calendar.get_all_events()
        date_events = [event for event in all_events if event[3] == date_str]
        
        for event_data in date_events:
            index = self.selected_date_events.InsertItem(self.selected_date_events.GetItemCount(), str(event_data[0]))
            self.selected_date_events.SetItem(index, 1, event_data[1])  # title
            self.selected_date_events.SetItem(index, 2, event_data[4] or "")  # time
            self.selected_date_events.SetItem(index, 3, event_data[5])  # type


    def go_to_today(self, event):
        """–û—Ç–∏–≤–∞ –Ω–∞ –¥–Ω–µ—à–Ω–∞—Ç–∞ –¥–∞—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–∞"""
        today = wx.DateTime.Today()
        self.calendar_ctrl.SetDate(today)
        self.on_date_selected(None)  # –û–±–Ω–æ–≤—è–≤–∞–º–µ –¥–∏—Å–ø–ª–µ—è

    def add_event(self, event):
        """–î–æ–±–∞–≤—è –Ω–æ–≤–æ —Å—ä–±–∏—Ç–∏–µ"""
        # –ü–æ–ø—ä–ª–≤–∞–º–µ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞—â–∞—Ç–∞ —Å–µ –¥–∞—Ç–∞ —Å –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–∞
        selected_date = self.calendar_ctrl.GetDate()
        default_date = selected_date.Format("%d-%m-%Y")
        
        dialog = EventDialog(self, "–ù–æ–≤–æ —Å—ä–±–∏—Ç–∏–µ", default_date)
        if dialog.ShowModal() == wx.ID_OK:
            title, description, date, time, event_type = dialog.get_data()
            self.calendar.add_event(title, description, date, time, event_type)
            self.refresh_calendar_display()
        dialog.Destroy()

    def delete_event(self, event):
        """–ò–∑—Ç—Ä–∏–≤–∞ –∏–∑–±—Ä–∞–Ω–æ—Ç–æ —Å—ä–±–∏—Ç–∏–µ"""
        selected = self.selected_date_events.GetFirstSelected()
        if selected == -1:
            wx.MessageBox("–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ —Å—ä–±–∏—Ç–∏–µ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –æ—Ç —Å–ø–∏—Å—ä–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            return
        
        event_id = int(self.selected_date_events.GetItemText(selected, 0))
        event_title = self.selected_date_events.GetItemText(selected, 1)
        
        if wx.MessageBox(f"–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ '{event_title}'?", 
                        "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ", wx.YES_NO | wx.ICON_QUESTION) == wx.YES:
            self.calendar.delete_event(event_id)
            self.refresh_calendar_display()

    # ============================================================================
    # üìö GRADES TAB - –°–∏—Å—Ç–µ–º–∞ –∑–∞ –æ—Ü–µ–Ω–∫–∏
    # ============================================================================

    def create_grades_tab(self):
        """–°—ä–∑–¥–∞–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞ –∑–∞ –æ—Ü–µ–Ω–∫–∏"""
        grades_panel = wx.Panel(self.notebook)
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –†–∞–∑–¥–µ–ª—è–º–µ –Ω–∞ –≥–æ—Ä–Ω–∞ –∏ –¥–æ–ª–Ω–∞ —á–∞—Å—Ç
        splitter = wx.SplitterWindow(grades_panel, style=wx.SP_3D)
        
        # –ì–æ—Ä–Ω–∞ —á–∞—Å—Ç - –ü—Ä–µ–¥–º–µ—Ç–∏
        subjects_panel = wx.Panel(splitter)
        subjects_sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ë—É—Ç–æ–Ω–∏ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∏
        subjects_btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        add_subject_btn = wx.Button(subjects_panel, label="‚ûï –ü—Ä–µ–¥–º–µ—Ç")
        delete_subject_btn = wx.Button(subjects_panel, label="üóëÔ∏è –ò–∑—Ç—Ä–∏–π –ø—Ä–µ–¥–º–µ—Ç")
        
        add_subject_btn.Bind(wx.EVT_BUTTON, self.add_subject)
        delete_subject_btn.Bind(wx.EVT_BUTTON, self.delete_subject)
        
        subjects_btn_sizer.Add(add_subject_btn, 0, wx.ALL, 5)
        subjects_btn_sizer.Add(delete_subject_btn, 0, wx.ALL, 5)
        
        # –°–ø–∏—Å—ä–∫ —Å –ø—Ä–µ–¥–º–µ—Ç–∏
        self.subjects_list = wx.ListCtrl(subjects_panel, style=wx.LC_REPORT | wx.LC_SINGLE_SEL)
        self.subjects_list.AppendColumn("ID", width=50)
        self.subjects_list.AppendColumn("–ü—Ä–µ–¥–º–µ—Ç", width=200)
        self.subjects_list.AppendColumn("–ö—Ä–µ–¥–∏—Ç–∏", width=80)
        self.subjects_list.AppendColumn("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª", width=150)
        self.subjects_list.AppendColumn("–°—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞", width=100)
        
        self.subjects_list.Bind(wx.EVT_LIST_ITEM_SELECTED, self.on_subject_selected)
        
        subjects_sizer.Add(subjects_btn_sizer, 0, wx.ALL, 5)
        subjects_sizer.Add(self.subjects_list, 1, wx.EXPAND | wx.ALL, 5)
        subjects_panel.SetSizer(subjects_sizer)
        
        # –î–æ–ª–Ω–∞ —á–∞—Å—Ç - –û—Ü–µ–Ω–∫–∏
        grades_panel_lower = wx.Panel(splitter)
        grades_sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ë—É—Ç–æ–Ω–∏ –∑–∞ –æ—Ü–µ–Ω–∫–∏
        grades_btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        add_grade_btn = wx.Button(grades_panel_lower, label="‚ûï –û—Ü–µ–Ω–∫–∞")
        delete_grade_btn = wx.Button(grades_panel_lower, label="üóëÔ∏è –ò–∑—Ç—Ä–∏–π –æ—Ü–µ–Ω–∫–∞")
        
        add_grade_btn.Bind(wx.EVT_BUTTON, self.add_grade)
        delete_grade_btn.Bind(wx.EVT_BUTTON, self.delete_grade)
        
        grades_btn_sizer.Add(add_grade_btn, 0, wx.ALL, 5)
        grades_btn_sizer.Add(delete_grade_btn, 0, wx.ALL, 5)
        
        # –°–ø–∏—Å—ä–∫ —Å –æ—Ü–µ–Ω–∫–∏
        self.grades_list = wx.ListCtrl(grades_panel_lower, style=wx.LC_REPORT | wx.LC_SINGLE_SEL)
        self.grades_list.AppendColumn("ID", width=50)
        self.grades_list.AppendColumn("–û—Ü–µ–Ω–∫–∞", width=80)
        self.grades_list.AppendColumn("–ú–∞–∫—Å", width=60)
        self.grades_list.AppendColumn("–¢–∏–ø", width=100)
        self.grades_list.AppendColumn("–û–ø–∏—Å–∞–Ω–∏–µ", width=150)
        self.grades_list.AppendColumn("–î–∞—Ç–∞", width=100)
        
        # –°—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.gpa_label = wx.StaticText(grades_panel_lower, label="–°—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞: 0.00")
        gpa_font = wx.Font(14, wx.FONTFAMILY_DEFAULT, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_BOLD)
        self.gpa_label.SetFont(gpa_font)
        self.gpa_label.SetForegroundColour(wx.Colour(50, 150, 50))
        
        grades_sizer.Add(grades_btn_sizer, 0, wx.ALL, 5)
        grades_sizer.Add(self.grades_list, 1, wx.EXPAND | wx.ALL, 5)
        grades_sizer.Add(self.gpa_label, 0, wx.ALL | wx.CENTER, 10)
        grades_panel_lower.SetSizer(grades_sizer)
        
        # Splitter setup
        splitter.SplitHorizontally(subjects_panel, grades_panel_lower)
        splitter.SetSashGravity(0.5)
        
        main_sizer.Add(splitter, 1, wx.EXPAND | wx.ALL, 5)
        grades_panel.SetSizer(main_sizer)
        self.notebook.AddPage(grades_panel, "üìä –û—Ü–µ–Ω–∫–∏")
        
        # –ó–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ
        self.refresh_subjects()
        self.update_average_display()

    # GRADES –ú–ï–¢–û–î–ò
    # --------------------------------------------------------------------------------

    def refresh_subjects(self, event=None):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å–ø–∏—Å—ä–∫–∞ —Å –ø—Ä–µ–¥–º–µ—Ç–∏"""
        self.subjects_list.DeleteAllItems()
        subjects = self.grades.get_all_subjects()
        
        for subject in subjects:
            index = self.subjects_list.InsertItem(self.subjects_list.GetItemCount(), str(subject[0]))
            self.subjects_list.SetItem(index, 1, subject[1])  # name
            self.subjects_list.SetItem(index, 2, str(subject[2]))  # credits
            self.subjects_list.SetItem(index, 3, subject[3] or "")  # professor
            
            # –ò–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å—Ä–µ–¥–Ω–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∞
            avg = self.grades.calculate_subject_average(subject[0])
            self.subjects_list.SetItem(index, 4, f"{avg:.2f}")

    def add_subject(self, event):
        """–î–æ–±–∞–≤—è –Ω–æ–≤ –ø—Ä–µ–¥–º–µ—Ç"""
        dialog = SubjectDialog(self, "–ù–æ–≤ –ø—Ä–µ–¥–º–µ—Ç")
        if dialog.ShowModal() == wx.ID_OK:
            name, credits, professor, semester = dialog.get_data()
            if name:
                self.grades.add_subject(name, credits, professor, semester)
                self.refresh_subjects()
                self.update_average_display()
        dialog.Destroy()

    def delete_subject(self, event):
        """–ò–∑—Ç—Ä–∏–≤–∞ –∏–∑–±—Ä–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç"""
        selected = self.subjects_list.GetFirstSelected()
        if selected == -1:
            wx.MessageBox("–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            return
        
        subject_id = int(self.subjects_list.GetItemText(selected, 0))
        
        if wx.MessageBox("–¢–æ–≤–∞ —â–µ –∏–∑—Ç—Ä–∏–µ –∏ –≤—Å–∏—á–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∞!\n–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ?", "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ", wx.YES_NO) == wx.YES:
            self.grades.delete_subject(subject_id)
            self.refresh_subjects()
            self.refresh_grades()
            self.update_average_display()

    def on_subject_selected(self, event):
        """–ü–æ–∫–∞–∑–≤–∞ –æ—Ü–µ–Ω–∫–∏—Ç–µ –∑–∞ –∏–∑–±—Ä–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç"""
        selected = event.GetIndex()
        subject_id = int(self.subjects_list.GetItemText(selected, 0))
        self.refresh_grades(subject_id)

    def refresh_grades(self, subject_id=None):
        """–û–±–Ω–æ–≤—è–≤–∞ —Å–ø–∏—Å—ä–∫–∞ —Å –æ—Ü–µ–Ω–∫–∏"""
        self.grades_list.DeleteAllItems()
        
        if subject_id:
            grades = self.grades.get_subject_grades(subject_id)
        else:
            # –ü–æ–∫–∞–∑–≤–∞–º–µ –≤—Å–∏—á–∫–∏ –æ—Ü–µ–Ω–∫–∏
            grades = []
            subjects = self.grades.get_all_subjects()
            for subject in subjects:
                grades.extend(self.grades.get_subject_grades(subject[0]))
        
        for grade in grades:
            index = self.grades_list.InsertItem(self.grades_list.GetItemCount(), str(grade[0]))
            self.grades_list.SetItem(index, 1, f"{grade[2]:.1f}")  # grade
            self.grades_list.SetItem(index, 2, f"{grade[3]:.1f}")  # max_grade
            self.grades_list.SetItem(index, 3, grade[4])  # exam_type
            self.grades_list.SetItem(index, 4, grade[5] or "")  # description
            self.grades_list.SetItem(index, 5, grade[6])  # exam_date

    def add_grade(self, event):
        """–î–æ–±–∞–≤—è –Ω–æ–≤–∞ –æ—Ü–µ–Ω–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –∏–º–∞ –∏–∑–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç
        selected = self.subjects_list.GetFirstSelected()
        if selected == -1:
            wx.MessageBox("–ú–æ–ª—è –ø—ä—Ä–≤–æ –∏–∑–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            return
        
        subject_id = int(self.subjects_list.GetItemText(selected, 0))
        
        dialog = GradeDialog(self, "–ù–æ–≤–∞ –æ—Ü–µ–Ω–∫–∞")
        if dialog.ShowModal() == wx.ID_OK:
            grade, exam_type, description, exam_date = dialog.get_data()
            if grade is not None:
                self.grades.add_grade(subject_id, grade, exam_type, description, exam_date)
                self.refresh_grades(subject_id)
                self.refresh_subjects()
                self.update_average_display()
        dialog.Destroy()

    def delete_grade(self, event):
        """–ò–∑—Ç—Ä–∏–≤–∞ –∏–∑–±—Ä–∞–Ω–∞—Ç–∞ –æ—Ü–µ–Ω–∫–∞"""
        selected = self.grades_list.GetFirstSelected()
        if selected == -1:
            wx.MessageBox("–ú–æ–ª—è –∏–∑–±–µ—Ä–µ—Ç–µ –æ—Ü–µ–Ω–∫–∞ –∑–∞ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            return
        
        grade_id = int(self.grades_list.GetItemText(selected, 0))
        
        if wx.MessageBox("–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ?", "–ü–æ—Ç–≤—ä—Ä–∂–¥–µ–Ω–∏–µ", wx.YES_NO) == wx.YES:
            self.grades.delete_grade(grade_id)
            # –û–±–Ω–æ–≤—è–≤–∞–º–µ —Ç–µ–∫—É—â–∏—Ç–µ –æ—Ü–µ–Ω–∫–∏
            subject_selected = self.subjects_list.GetFirstSelected()
            if subject_selected != -1:
                subject_id = int(self.subjects_list.GetItemText(subject_selected, 0))
                self.refresh_grades(subject_id)
            self.refresh_subjects()
            self.update_average_display()

    def update_average_display(self):
        """–û–±–Ω–æ–≤—è–≤–∞ –ø–æ–∫–∞–∑–∞–Ω–∞—Ç–∞ —Å—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞"""
        average = self.grades.calculate_average_grade()
        self.gpa_label.SetLabel(f"–°—Ä–µ–¥–Ω–∞ –æ—Ü–µ–Ω–∫–∞: {average:.2f}")


# ============================================================================
# ü™ü DIALOG –ö–õ–ê–°–û–í–ï - –î–∏–∞–ª–æ–≥–æ–≤–∏ –ø—Ä–æ–∑–æ—Ä—Ü–∏
# ============================================================================

class EventDialog(wx.Dialog):
    """–î–∏–∞–ª–æ–≥ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ —Å—ä–±–∏—Ç–∏–µ"""
    def __init__(self, parent, title, default_date=None):
        super().__init__(parent, title=title, size=(550, 450))
        
        panel = wx.Panel(self)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ó–∞–≥–ª–∞–≤–∏–µ
        title_label = wx.StaticText(panel, label="–ó–∞–≥–ª–∞–≤–∏–µ:")
        self.title_ctrl = wx.TextCtrl(panel)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = wx.StaticText(panel, label="–û–ø–∏—Å–∞–Ω–∏–µ:")
        self.desc_ctrl = wx.TextCtrl(panel, style=wx.TE_MULTILINE, size=(-1, 60))
        
        # –î–∞—Ç–∞
        date_label = wx.StaticText(panel, label="–î–∞—Ç–∞ (DD-MM-YYYY):")
        date_value = default_date if default_date else datetime.now().strftime("%d-%m-%Y")
        self.date_ctrl = wx.TextCtrl(panel, value=date_value)
        
        # –ß–∞—Å
        time_label = wx.StaticText(panel, label="–ß–∞—Å (HH:MM) - –Ω–µ–∑–∞–¥—ä–ª–∂–∏—Ç–µ–ª–Ω–æ:")
        self.time_ctrl = wx.TextCtrl(panel)
        
        # –¢–∏–ø
        type_label = wx.StaticText(panel, label="–¢–∏–ø:")
        self.type_choice = wx.Choice(panel)
        types = ["general", "exam", "assignment", "lecture", "meeting", "deadline", "birthday", "reminder"]
        for t in types:
            self.type_choice.Append(t)
        self.type_choice.SetSelection(0)
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ok_btn = wx.Button(panel, wx.ID_OK, "–ó–∞–ø–∏—à–∏")
        cancel_btn = wx.Button(panel, wx.ID_CANCEL, "–û—Ç–∫–∞–∑")
        btn_sizer.Add(ok_btn, 0, wx.ALL, 5)
        btn_sizer.Add(cancel_btn, 0, wx.ALL, 5)
        
        # Layout
        sizer.Add(title_label, 0, wx.ALL, 5)
        sizer.Add(self.title_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(desc_label, 0, wx.ALL, 5)
        sizer.Add(self.desc_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(date_label, 0, wx.ALL, 5)
        sizer.Add(self.date_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(time_label, 0, wx.ALL, 5)
        sizer.Add(self.time_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(type_label, 0, wx.ALL, 5)
        sizer.Add(self.type_choice, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(btn_sizer, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        
        panel.SetSizer(sizer)
        self.Center()
    
    def get_data(self):
        return (
            self.title_ctrl.GetValue(),
            self.desc_ctrl.GetValue(),
            self.date_ctrl.GetValue(),
            self.time_ctrl.GetValue() if self.time_ctrl.GetValue() else None,
            self.type_choice.GetStringSelection()
        )


class SubjectDialog(wx.Dialog):
    """–î–∏–∞–ª–æ–≥ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç"""
    def __init__(self, parent, title):
        super().__init__(parent, title=title, size=(500, 350))
        
        panel = wx.Panel(self)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ò–º–µ
        name_label = wx.StaticText(panel, label="–ò–º–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç:")
        self.name_ctrl = wx.TextCtrl(panel)
        
        # –ö—Ä–µ–¥–∏—Ç–∏
        credits_label = wx.StaticText(panel, label="–ö—Ä–µ–¥–∏—Ç–∏:")
        self.credits_ctrl = wx.SpinCtrl(panel, value="3", min=1, max=10)
        
        # –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª
        prof_label = wx.StaticText(panel, label="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª:")
        self.prof_ctrl = wx.TextCtrl(panel)
        
        # –°–µ–º–µ—Å—Ç—ä—Ä
        sem_label = wx.StaticText(panel, label="–°–µ–º–µ—Å—Ç—ä—Ä:")
        self.sem_ctrl = wx.TextCtrl(panel)
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ok_btn = wx.Button(panel, wx.ID_OK, "–ó–∞–ø–∏—à–∏")
        cancel_btn = wx.Button(panel, wx.ID_CANCEL, "–û—Ç–∫–∞–∑")
        btn_sizer.Add(ok_btn, 0, wx.ALL, 5)
        btn_sizer.Add(cancel_btn, 0, wx.ALL, 5)
        
        # Layout
        sizer.Add(name_label, 0, wx.ALL, 5)
        sizer.Add(self.name_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(credits_label, 0, wx.ALL, 5)
        sizer.Add(self.credits_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(prof_label, 0, wx.ALL, 5)
        sizer.Add(self.prof_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(sem_label, 0, wx.ALL, 5)
        sizer.Add(self.sem_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(btn_sizer, 0, wx.ALIGN_RIGHT | wx.ALL, 15)
        
        panel.SetSizer(sizer)
        self.Center()
    
    def get_data(self):
        return (
            self.name_ctrl.GetValue(),
            self.credits_ctrl.GetValue(),
            self.prof_ctrl.GetValue(),
            self.sem_ctrl.GetValue()
        )


class GradeDialog(wx.Dialog):
    """–î–∏–∞–ª–æ–≥ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –æ—Ü–µ–Ω–∫–∞"""
    def __init__(self, parent, title):
        super().__init__(parent, title=title, size=(500, 450))
        
        panel = wx.Panel(self)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –û—Ü–µ–Ω–∫–∞
        grade_label = wx.StaticText(panel, label="–û—Ü–µ–Ω–∫–∞:")
        self.grade_ctrl = wx.SpinCtrlDouble(panel, value="5.0", min=2.0, max=6.0, inc=0.1)
        
        # –ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ –æ—Ü–µ–Ω–∫–∞ –≤–∏–Ω–∞–≥–∏ –µ 6.0
        max_info = wx.StaticText(panel, label="–ú–∞–∫—Å–∏–º–∞–ª–Ω–∞ –æ—Ü–µ–Ω–∫–∞: 6.0")
        
        # –¢–∏–ø –∏–∑–ø–∏—Ç
        type_label = wx.StaticText(panel, label="–¢–∏–ø –∏–∑–ø–∏—Ç:")
        self.type_choice = wx.Choice(panel)
        types = ["test", "exam", "homework", "project", "quiz", "presentation", "lab", "final"]
        for t in types:
            self.type_choice.Append(t)
        self.type_choice.SetSelection(0)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        desc_label = wx.StaticText(panel, label="–û–ø–∏—Å–∞–Ω–∏–µ:")
        self.desc_ctrl = wx.TextCtrl(panel)
        
        # –î–∞—Ç–∞
        date_label = wx.StaticText(panel, label="–î–∞—Ç–∞ (DD-MM-YYYY):")
        self.date_ctrl = wx.TextCtrl(panel, value=datetime.now().strftime("%d-%m-%Y"))
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ok_btn = wx.Button(panel, wx.ID_OK, "–ó–∞–ø–∏—à–∏")
        cancel_btn = wx.Button(panel, wx.ID_CANCEL, "–û—Ç–∫–∞–∑")
        btn_sizer.Add(ok_btn, 0, wx.ALL, 5)
        btn_sizer.Add(cancel_btn, 0, wx.ALL, 5)
        
        # Layout
        sizer.Add(grade_label, 0, wx.ALL, 5)
        sizer.Add(self.grade_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(max_info, 0, wx.ALL, 5)
        sizer.Add(type_label, 0, wx.ALL, 5)
        sizer.Add(self.type_choice, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(desc_label, 0, wx.ALL, 5)
        sizer.Add(self.desc_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(date_label, 0, wx.ALL, 5)
        sizer.Add(self.date_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(btn_sizer, 0, wx.ALIGN_RIGHT | wx.ALL, 15)
        
        panel.SetSizer(sizer)
        self.Center()
    
    def get_data(self):
        return (
            self.grade_ctrl.GetValue(),
            self.type_choice.GetStringSelection(),
            self.desc_ctrl.GetValue(),
            self.date_ctrl.GetValue()
        )


class NoteDialog(wx.Dialog):
    """–î–∏–∞–ª–æ–≥ –∑–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –±–µ–ª–µ–∂–∫–∞"""
    def __init__(self, parent, title):
        super().__init__(parent, title=title, size=(400, 300))
        
        panel = wx.Panel(self)
        sizer = wx.BoxSizer(wx.VERTICAL)
        
        # –ó–∞–≥–ª–∞–≤–∏–µ
        title_label = wx.StaticText(panel, label="–ó–∞–≥–ª–∞–≤–∏–µ:")
        self.title_ctrl = wx.TextCtrl(panel)
        
        # –°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ
        content_label = wx.StaticText(panel, label="–°—ä–¥—ä—Ä–∂–∞–Ω–∏–µ:")
        self.content_ctrl = wx.TextCtrl(panel, style=wx.TE_MULTILINE)
        
        # –ë—É—Ç–æ–Ω–∏
        btn_sizer = wx.BoxSizer(wx.HORIZONTAL)
        ok_btn = wx.Button(panel, wx.ID_OK, "–ó–∞–ø–∏—à–∏")
        cancel_btn = wx.Button(panel, wx.ID_CANCEL, "–û—Ç–∫–∞–∑")
        
        btn_sizer.Add(ok_btn, 0, wx.ALL, 5)
        btn_sizer.Add(cancel_btn, 0, wx.ALL, 5)
        
        # Layout
        sizer.Add(title_label, 0, wx.ALL, 5)
        sizer.Add(self.title_ctrl, 0, wx.EXPAND | wx.ALL, 5)
        sizer.Add(content_label, 0, wx.ALL, 5)
        sizer.Add(self.content_ctrl, 1, wx.EXPAND | wx.ALL, 5)
        sizer.Add(btn_sizer, 0, wx.ALIGN_RIGHT | wx.ALL, 5)
        
        panel.SetSizer(sizer)
        self.Center()
    
    def get_data(self):
        return self.title_ctrl.GetValue(), self.content_ctrl.GetValue()


# ============================================================================
# üöÄ –ì–õ–ê–í–ù–û –ü–†–ò–õ–û–ñ–ï–ù–ò–ï
# ============================================================================

class StudentApp(wx.App):
    def OnInit(self):
        frame = StudentAssistant()
        frame.Show()
        return True


if __name__ == "__main__":
    app = StudentApp()
    app.MainLoop() 